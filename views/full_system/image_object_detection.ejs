<!-- Include title, favicon and label studio stylesheet -->
<title>INLAB - Image Object Detection</title>
<link rel="shortcut icon" type="image/png" href="/img/logoInlabSquare.png"/>
<link href="https://unpkg.com/label-studio@0.4.0/build/static/css/main.14acfaa5.css" rel="stylesheet">
<meta http-equiv="Content-Security-Policy" content="default-src 'self' data: gap: https://requirejs.org;  media-src *">

<!-- Create the ls container -->
<div id="label-window"></div>

<!-- Display worker name and number of tasks have done-->
<div id="worker-name">&nbsp&nbsp&nbsp&nbsp<%= workerName %></div>
<div id="no-work-done">&nbsp&nbsp&nbsp&nbspSố ảnh đã dán nhãn: <%= noWorkDone %></div>

<!-- Include the label library -->
<script src="/js/inlabjs/main.js"></script>
<script src="/js/idp.js"></script>
<script src="https://requirejs.org/docs/release/2.3.5/minified/require.js"></script>

<!-- Initialize Label window -->
<script>
    window.onload = async function() {
    
    var currentProjectId = '<%= project_id %>';

    var currentTaskID;
    var currentWorkerID;
    var currentWorkerPk;
    var currentWorkerName;
    var noWorkDone;

    var workerNameDiv = document.getElementById('worker-name');
    var noWokeDoneDiv = document.getElementById('no-work-done');

    var initialTask = await initTask(currentProjectId);

    var start_timestamp = Math.floor(Date.now() / 1000);

    console.log("initialTask", initialTask);

    currentTaskID = initialTask.id;
    currentWorkerID = initialTask.workerID;
    currentWorkerPk = initialTask.workerPk;
    currentWorkerName = initialTask.workerName;
    

    console.log("Name: ", currentWorkerName);

    if (currentTaskID === undefined) {
        console.log("Hết dữ liệu dán nhãn");
    }
    console.log("initialTask: ", initialTask);
    
    var labelStudio = new LabelStudio('label-window', {
        config: `
      <View>
        <Image name="img" value="$url"></Image>
        <RectangleLabels name="tag" toName="img">
          <Label value="Lửa"></Label>
          <Label value="Khói"></Label>  
        </RectangleLabels>
      </View>
    `,

        interfaces: [
            "panel",
            "update",
            "controls",
            "side-column",
            "completions:menu",
            "completions:add-new",
            "completions:delete",
            "predictions:menu",
        ],

        user: {
            pk: currentWorkerPk,
            firstName: "",
            lastName: currentWorkerName
        },

        messages: {
            DONE: "Đã hoàn thành!",
            NO_COMP_LEFT: "Đã hết completion",
            NO_NEXT_TASK: "Dữ liệu để dán nhãn đã hết, xin cảm ơn!",
            NO_ACCESS: "Bạn không được cấp quyền truy cập dữ liệu này"
        },

        task: initialTask,

        onLabelStudioLoad: function (LS) {
            var c = LS.completionStore.addCompletion({
                userGenerate: true
            });
            LS.completionStore.selectCompletion(c.id);
            if (currentTaskID === undefined) {
                LS.setFlags({ noTask: true });
            }
        },

        onSubmitCompletion: async function(ls, completion) {
            ls.setFlags({ isLoading: true });
            console.log("completion", completion);

            if (currentTaskID === undefined) {
                ls.setFlags({ noTask: true });
                return;
            }

            let cs = ls.completionStore;
            let c;
            console.log("serialize", ls.completionStore.selected.serializeCompletion()[0]);
            var serialized = ls.completionStore.selected.serializeCompletion()[0];

            var interval_sec = Math.floor(Date.now() / 1000) - start_timestamp;

            var result = {
                id: currentTaskID,
                value: serialized.value,
                createdBy: currentWorkerPk,
                createdDate: completion.createdDate,
                createdInterval: interval_sec
            }

            console.log("Result done: ", result);

            var task = await submitResult(currentProjectId, result);

            start_timestamp = Math.floor(Date.now() / 1000) ;

            if (task === undefined) {
                ls.setFlags({ noTask: true})
            } else {
                ls.setFlags({isLoading: false})
            }
            
            task.data = JSON.stringify(task.data);
            console.log("Received task from server: ", task)

            currentTaskID = task.id;
            currentWorkerID = task.workerID;
            currentWorkerPk = task.workerPk;
            currentWorkerName = task.workerName;
            noWorkDone = task.noWorkDone;

            console.log("currentWorkerName: ", currentWorkerName);
            console.log("workerName: ", '<%= workerName %>');
            noWokeDoneDiv.innerHTML = "&nbsp&nbsp&nbsp&nbspSố ảnh đã dán nhãn: " + noWorkDone;
            workerNameDiv.innerHTML ="&nbsp&nbsp&nbsp&nbsp" + currentWorkerName;

            ls.assignTask(task);
            ls.initializeStore(_convertTask(task));

            if (cs.predictions.length > 0) {
                c = ls.completionStore.addCompletionFromPrediction(cs.predictions[0]);
            }
            else {
                c = ls.completionStore.addCompletion({ userGenerate: true });
            }

            cs.selectCompletion(c.id);
            console.log("Re-assisgned!")
        },

        onEntityCreate: function(region) {
            console.log("Region: ", region);
        },

        onSkipTask: async function(ls) {
            let cs = ls.completionStore;
            let c;
            
            var task = await initTask(currentProjectId);
            task.data = JSON.stringify(task.data);
            console.log("Received task from server: ", task)
            currentTaskID = task.id;
            currentWorkerID = task.workerID;
            currentWorkerPk = task.workerPk;
            currentWorkerName = task.workerName;

            ls.assignTask(task);
            ls.initializeStore(_convertTask(task));

            if (cs.predictions.length > 0) {
                c = ls.completionStore.addCompletionFromPrediction(cs.predictions[0]);
            }
            else {
                c = ls.completionStore.addCompletion({ userGenerate: true });
            }

            cs.selectCompletion(c.id);
        }
        });
    }

    
   
</script>